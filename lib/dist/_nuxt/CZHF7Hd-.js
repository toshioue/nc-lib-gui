import{cE as a}from"./B2hUoZAs.js";const l=s=>/^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@(([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{2,})$/i.test(s),c={validator:(s,r)=>new Promise((o,t)=>{const{t:e}=a().global;if(!r)return t(new Error(e("msg.error.tableNameRequired")));if(r.length>52)return t(new Error(e("msg.error.columnNameExceedsCharacters",{value:52})));const n=r.match(/[./\\]/g);return n?t(new Error(`${e("msg.error.followingCharactersAreNotAllowed")} ${n.map(i=>JSON.stringify(i)).join(", ")}`)):o(!0)})},d={validator:(s,r)=>{const{t:o}=a().global;return new Promise((t,e)=>{(r==null?void 0:r.length)>50&&e(new Error(o("msg.error.projectNameExceeds50Characters"))),r[0]===" "&&e(new Error(o("msg.error.projectNameCannotStartWithSpace"))),t(!0)})}},g=()=>{const{t:s}=a().global;return{required:!0,message:s("msg.error.requiredField")}},u=()=>({validator:(s,r)=>{const{t:o}=a().global,t=255;return new Promise((e,n)=>{(r==null?void 0:r.length)>t&&n(new Error(o("msg.error.columnNameExceedsCharacters",{value:t}))),e(!0)})}}),w={validator:(s,r)=>new Promise((o,t)=>{const{t:e}=a().global;return/(10)(\.([2]([0-5][0-5]|[01234][6-9])|[1][0-9][0-9]|[1-9][0-9]|[0-9])){3}|(172)\.(1[6-9]|2[0-9]|3[0-1])(\.(2[0-4][0-9]|25[0-5]|[1][0-9][0-9]|[1-9][0-9]|[0-9])){2}|(192)\.(168)(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){2}|(0.0.0.0)|localhost?/g.test(r)?t(new Error(e("msg.error.ipNotAllowed"))):o(!0)})},f={validator:(s,r)=>new Promise((o,t)=>{const{t:e}=a().global;return r&&!/.*\.(csv)/.test(r)?t(new Error(`${e("msg.error.targetFileIsNotAnAcceptedFileType")}. ${e("msg.error.theAcceptedFileTypeIsCsv")}`)):o(!0)})},p={validator:(s,r)=>new Promise((o,t)=>{const{t:e}=a().global;return r&&!/.*\.(xls|xlsx|xlsm|ods|ots)/.test(r)?t(new Error(`${e("msg.error.targetFileIsNotAnAcceptedFileType")}. ${e("msg.error.theAcceptedFileTypesAreXlsXlsxXlsmOdsOts")}`)):o(!0)})},E={validator:(s,r)=>new Promise((o,t)=>{const{t:e}=a().global;for(const n of r){if(n.key==="")return t(new Error(e("msg.error.parameterKeyCannotBeEmpty")));if(r.filter(i=>i.key===n.key).length!==1)return t(new Error(e("msg.error.duplicateParameterKeysAreNotAllowed")))}return o(!0)})},h={validator:(s,r)=>new Promise((o,t)=>{if(!r||r.length===0)return t(new Error("Email is required"));const e=(r||"").split(/\s*,\s*/).filter(n=>!l(n));return e.length>0?t(new Error(`${e.length>1?" Invalid emails:":"Invalid email:"} ${e.join(", ")} `)):o(!0)})};export{c as a,d as b,f as c,p as d,u as e,g as f,h as g,E as h,w as i,l as v};
